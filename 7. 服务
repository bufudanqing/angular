组件不应该直接获取或保存数据，它们不应该了解是否在展示假数据。 它们应该聚焦于展示数据，而把数据访问的职责委托给某个服务。

你将创建一个 HeroService，应用中的所有类都可以使用它来获取英雄列表。 不要使用 new 来创建此服务，而要依靠 Angular 的依赖注入机制把它注入到 HeroesComponent 的构造函数中。

服务是在多个“互相不知道”的类之间共享信息的好办法。 你将创建一个 MessageService，并且把它注入到两个地方：

HeroService 中，它会使用该服务发送消息。

MessagesComponent 中，它会显示其中的消息。

================================
依赖注入：
依赖注入（DI）是用来创建对象及其依赖的其它对象的一种方式。 当依赖注入系统创建某个对象实例时，会负责提供该对象所依赖的对象（称为该对象的依赖）。


=======================================
提供（provide） HeroService
在要求 Angular 把 HeroService 注入到 HeroesComponent 之前，你必须先把这个服务提供给依赖注入系统。稍后你就要这么做。

有很多途径可以提供 HeroService：在 HeroesComponent 中、在 AppComponent 中，或在 AppModule 中。 每个选项都各有优缺点。

这节课选择在 AppModule 中提供它。

这是一个常用的选择，因此你可以通过 --module=app 选项让 CLI 自动把它提供给 AppModule。

ng generate service hero --module=app


==========================================
让构造函数保持简单，只做初始化操作，比如把构造函数的参数赋值给属性。 构造函数不应该做任何事。 它肯定不能调用某个函数来向远端服务（比如真实的数据服务）发起 HTTP 请求。

你应该改为在 ngOnInit 生命周期钩子中调用 getHeroes()，并且等 Angular 构造出 HeroesComponent 的实例之后，找个恰当的时机调用 ngOnInit。
